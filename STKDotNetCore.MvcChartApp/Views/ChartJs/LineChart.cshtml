<div>
    <canvas id="myChart"></canvas>
</div>

@section scripts {
    <script>
        const Utils = {
            transparentize: function (color, opacity) {
                const alpha = 1 - opacity;
                return `rgba(${color.match(/\d+/g).join(',')},${alpha})`;
            },
            numbers: function (config) {
                const cfg = config || {};
                const min = cfg.min || 0;
                const max = cfg.max || 100;
                const count = cfg.count || 8;
                const decimals = cfg.decimals || 8;
                const dfactor = Math.pow(10, decimals) || 0;
                const data = [];
                let i;

                for (i = 0; i < count; ++i) {
                    data.push(Math.round(min + Math.random() * (max - min)) / dfactor);
                }

                return data;
            },
            months: function (config) {
                const cfg = config || {};
                const count = cfg.count || 12;
                const section = cfg.section;
                const values = [];
                let i;
                const monthNames = [
                    'January', 'February', 'March', 'April', 'May', 'June', 'July',
                    'August', 'September', 'October', 'November', 'December'
                ];

                for (i = 0; i < count; ++i) {
                    const value = monthNames[Math.ceil(i) % 12];
                    values.push(value.substring(0, section));
                }

                return values;
            }
        };

        const DATA_COUNT = 7;
        const NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };

        const labels = Utils.months({ count: 7 });
        const data = {
            labels: labels,
            datasets: [
                {
                    label: 'Dataset 1',
                    data: Utils.numbers(NUMBER_CFG),
                    borderColor: 'rgb(255, 99, 132)',
                    backgroundColor: Utils.transparentize('rgb(255, 99, 132)', 0.5),
                },
                {
                    label: 'Dataset 2',
                    data: Utils.numbers(NUMBER_CFG),
                    borderColor: 'rgb(54, 162, 235)',
                    backgroundColor: Utils.transparentize('rgb(54, 162, 235)', 0.5),
                }
            ]
        };

        const actions = [
            {
                name: 'Randomize',
                handler(chart) {
                    chart.data.datasets.forEach(dataset => {
                        dataset.data = Utils.numbers({ count: chart.data.labels.length, min: -100, max: 100 });
                    });
                    chart.update();
                }
            },
            {
                name: 'Add Dataset',
                handler(chart) {
                    const data = chart.data;
                    const dsColor = Utils.namedColor(chart.data.datasets.length);
                    const newDataset = {
                        label: 'Dataset ' + (data.datasets.length + 1),
                        backgroundColor: Utils.transparentize(dsColor, 0.5),
                        borderColor: dsColor,
                        data: Utils.numbers({ count: data.labels.length, min: -100, max: 100 }),
                    };
                    chart.data.datasets.push(newDataset);
                    chart.update();
                }
            },
            {
                name: 'Add Data',
                handler(chart) {
                    const data = chart.data;
                    if (data.datasets.length > 0) {
                        data.labels = Utils.months({ count: data.labels.length + 1 });

                        for (let index = 0; index < data.datasets.length; ++index) {
                            data.datasets[index].data.push(Utils.rand(-100, 100));
                        }

                        chart.update();
                    }
                }
            },
            {
                name: 'Remove Dataset',
                handler(chart) {
                    chart.data.datasets.pop();
                    chart.update();
                }
            },
            {
                name: 'Remove Data',
                handler(chart) {
                    chart.data.labels.splice(-1, 1); // remove the label first

                    chart.data.datasets.forEach(dataset => {
                        dataset.data.pop();
                    });

                    chart.update();
                }
            }
        ];

        const config = {
            type: 'line',
            data: data,
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    },
                    title: {
                        display: true,
                        text: 'Chart.js Line Chart'
                    }
                }
            },
        };

        const ctx = document.getElementById('myChart');

        new Chart(ctx, config);
    </script>
}
